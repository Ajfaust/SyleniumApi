// <auto-generated />
using System;
using BudgetUpServer.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BudgetUpServer.Migrations
{
    [DbContext(typeof(BudgetContext))]
    [Migration("20240428195946_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BudgetUpServer.Entity.FinancialAccount", b =>
                {
                    b.Property<int>("FinancialAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FinancialAccountId"));

                    b.Property<int>("FinancialAccountTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer");

                    b.HasKey("FinancialAccountId");

                    b.HasIndex("FinancialAccountTypeId");

                    b.HasIndex("PortfolioId");

                    b.ToTable("FinancialAccount");
                });

            modelBuilder.Entity("BudgetUpServer.Entity.FinancialAccountType", b =>
                {
                    b.Property<int>("FinancialAccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FinancialAccountTypeId"));

                    b.Property<int>("FinancialCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FinancialAccountTypeId");

                    b.HasIndex("FinancialCategoryId");

                    b.ToTable("FinancialAccountType");

                    b.HasData(
                        new
                        {
                            FinancialAccountTypeId = 1,
                            FinancialCategoryId = 1,
                            Name = "Checking"
                        },
                        new
                        {
                            FinancialAccountTypeId = 2,
                            FinancialCategoryId = 1,
                            Name = "Savings"
                        },
                        new
                        {
                            FinancialAccountTypeId = 3,
                            FinancialCategoryId = 1,
                            Name = "Investment"
                        },
                        new
                        {
                            FinancialAccountTypeId = 4,
                            FinancialCategoryId = 2,
                            Name = "Credit Card"
                        });
                });

            modelBuilder.Entity("BudgetUpServer.Entity.FinancialCategory", b =>
                {
                    b.Property<int>("FinancialCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FinancialCategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FinancialCategoryId");

                    b.ToTable("FinancialCategory");

                    b.HasData(
                        new
                        {
                            FinancialCategoryId = 1,
                            Name = "Asset"
                        },
                        new
                        {
                            FinancialCategoryId = 2,
                            Name = "Liability"
                        });
                });

            modelBuilder.Entity("BudgetUpServer.Entity.Portfolio", b =>
                {
                    b.Property<int>("PortfolioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PortfolioId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PortfolioId");

                    b.ToTable("Portfolio");

                    b.HasData(
                        new
                        {
                            PortfolioId = 1,
                            Name = "My Portfolio"
                        });
                });

            modelBuilder.Entity("BudgetUpServer.Entity.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionId"));

                    b.Property<bool>("Cleared")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("FinancialAccountId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Inflow")
                        .HasColumnType("numeric");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<decimal>("Outflow")
                        .HasColumnType("numeric");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer");

                    b.Property<int?>("TransactionCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("VendorId")
                        .HasColumnType("integer");

                    b.HasKey("TransactionId");

                    b.HasIndex("FinancialAccountId");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("TransactionCategoryId");

                    b.HasIndex("VendorId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("BudgetUpServer.Entity.TransactionCategory", b =>
                {
                    b.Property<int>("TransactionCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionCategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentCategoryTransactionCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer");

                    b.HasKey("TransactionCategoryId");

                    b.HasIndex("ParentCategoryTransactionCategoryId");

                    b.HasIndex("PortfolioId");

                    b.ToTable("TransactionCategory");
                });

            modelBuilder.Entity("BudgetUpServer.Entity.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VendorId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer");

                    b.HasKey("VendorId");

                    b.HasIndex("PortfolioId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("BudgetUpServer.Entity.FinancialAccount", b =>
                {
                    b.HasOne("BudgetUpServer.Entity.FinancialAccountType", "FinancialAccountType")
                        .WithMany("FinancialAccounts")
                        .HasForeignKey("FinancialAccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BudgetUpServer.Entity.Portfolio", "Portfolio")
                        .WithMany("FinancialAccounts")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialAccountType");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("BudgetUpServer.Entity.FinancialAccountType", b =>
                {
                    b.HasOne("BudgetUpServer.Entity.FinancialCategory", "FinancialCategory")
                        .WithMany("FinancialAccountTypes")
                        .HasForeignKey("FinancialCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialCategory");
                });

            modelBuilder.Entity("BudgetUpServer.Entity.Transaction", b =>
                {
                    b.HasOne("BudgetUpServer.Entity.FinancialAccount", "FinancialAccount")
                        .WithMany()
                        .HasForeignKey("FinancialAccountId");

                    b.HasOne("BudgetUpServer.Entity.Portfolio", "Portfolio")
                        .WithMany("Transactions")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BudgetUpServer.Entity.TransactionCategory", "TransactionCategory")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionCategoryId");

                    b.HasOne("BudgetUpServer.Entity.Vendor", "Vendor")
                        .WithMany("Transactions")
                        .HasForeignKey("VendorId");

                    b.Navigation("FinancialAccount");

                    b.Navigation("Portfolio");

                    b.Navigation("TransactionCategory");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("BudgetUpServer.Entity.TransactionCategory", b =>
                {
                    b.HasOne("BudgetUpServer.Entity.TransactionCategory", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryTransactionCategoryId");

                    b.HasOne("BudgetUpServer.Entity.Portfolio", "Portfolio")
                        .WithMany("TransactionCategories")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentCategory");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("BudgetUpServer.Entity.Vendor", b =>
                {
                    b.HasOne("BudgetUpServer.Entity.Portfolio", "Portfolio")
                        .WithMany("Vendors")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("BudgetUpServer.Entity.FinancialAccountType", b =>
                {
                    b.Navigation("FinancialAccounts");
                });

            modelBuilder.Entity("BudgetUpServer.Entity.FinancialCategory", b =>
                {
                    b.Navigation("FinancialAccountTypes");
                });

            modelBuilder.Entity("BudgetUpServer.Entity.Portfolio", b =>
                {
                    b.Navigation("FinancialAccounts");

                    b.Navigation("TransactionCategories");

                    b.Navigation("Transactions");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("BudgetUpServer.Entity.TransactionCategory", b =>
                {
                    b.Navigation("SubCategories");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BudgetUpServer.Entity.Vendor", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
